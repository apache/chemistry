/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Authors:
 *     Stefane Fermigier, Nuxeo
 *     Florent Guillaume, Nuxeo
 */
gunit CmisSql;

@header{
package org.apache.chemistry.cmissql;
}

// Lexer tests

ID:
"a" OK
"!" FAIL
"toto" OK
"toto123" OK
"toto123_" OK
"123" FAIL
"123abc" FAIL

SIGNED_NUMERIC_LITERAL:
"123" OK
"0" OK
"1" OK
"-1" OK
"-123" OK
"0123" FAIL
"-0123" FAIL
"123abc" FAIL

CHARACTER_STRING_LITERAL:
"'abc'" OK
"'a''bc'" OK
"'abc" FAIL
"abc'" FAIL

// Parser tests

literal:
"123" OK
"-123" OK
"0" OK
"0123" FAIL
"abc123" FAIL
"123abc" FAIL
"'abc'" OK

order_by_clause:
"ORDER BY toto" -> (ORDER_BY toto)
"ORDER BY titi ASC" -> (ORDER_BY titi ASC)
"ORDER BY tutu DESC" -> (ORDER_BY tutu DESC)

column_reference:
"toto" -> "toto"
"toto.titi" -> "toto . titi"

in_predicate:
"toto IN ( 'a', 'b', 'c')" -> (IN toto 'a' 'b' 'c')
"toto IN ( 1, 2, 3)" -> (IN toto 1 2 3)

comparison_predicate:
"a = 1" -> (= a 1)
"a <> 1" -> (<> a 1)

predicate:
"a = 1" -> (= a 1)
"b IN ('test')" -> (IN b 'test')
"c IS NULL" -> (IS c NULL)
"c IS NOT NULL" -> (IS c NOT NULL)
"1 = ANY d" -> (= 1 ANY d)
"LOWER(type) = 'email'" -> (= LOWER type 'email')

search_condition:
"toto = 1" -> (= toto 1)
"a = 1 AND b <> 2 OR c >= 3 AND NOT d <= 4" -> (OR (AND (= a 1) (<> b 2)) (AND (>= c 3) (NOT (<= d 4))))

// ---------------------------------------------------------------

query:
"SELECT * FROM Document" -> (SELECT * (FROM Document))
"SELECT a, b, c FROM Document" -> (SELECT (a b c) (FROM Document))
"SELECT a, b, c FROM Document ORDER BY a, b, c" -> (SELECT (a b c) (FROM Document)) (ORDER_BY a b c)


// Examples from the specs.

<<
SELECT TITLE, AUTHORS, DATE
FROM WHITE_PAPER
WHERE ( IN_TREE( , 'ID00093854763') ) AND ( 'SMITH' = ANY AUTHORS )
>> -> (SELECT (TITLE AUTHORS DATE) (FROM WHITE_PAPER) (WHERE (AND (IN_TREE ( , 'ID00093854763' )) (= 'SMITH' ANY AUTHORS))))

<<
SELECT OBJECT_ID, SCORE() AS X, DESTINATION, DEPARTURE_DATES
FROM TRAVEL_BROCHURE
WHERE ( CONTAINS( , 'CARIBBEAN CENTRAL AMERICA CRUISE TOUR') ) AND
  ( '2010-1-1' < ANY DEPARTURE_DATES )
ORDER BY X DESC
>> OK

<<
SELECT *
FROM CAR_REVIEW
WHERE ( LOWER(MAKE) = 'buick' ) OR
  ( ANY FEATURES IN ('NAVIGATION SYSTEM', 'SATELLITE RADIO', 'MP3' ) )
>> OK

/* JOINs not working yet.
<<SELECT Y.CLAIM_NUM, X.PROPERTY_ADDRESS, Y.DAMAGE_ESTIMATES
FROM POLICY AS X JOIN CLAIMS AS Y ON ( X.POLICY_NUM = Y.POLICY_NUM )
WHERE ( 100000 <= ANY Y.DAMAGE_ESTIMATES ) AND ( Y.CAUSE NOT LIKE '%Katrina%' )>> OK
*/
